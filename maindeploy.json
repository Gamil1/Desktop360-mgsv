{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "vmSize": {
            "type": "string",
            "defaultValue": "Standard_A2_v2",
            "metadata": {
                "description": "Size for the Virtual Machine."
            }
        },
        "virtualNetworkResourceGroupName": {
            "type": "string",
            "defaultValue": "[resourceGroup().name]",
            "metadata": {
                "description": "Name of the resource group for the existing virtual network"
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location for the resources."
            }
        },
        "virtualNetworkName": {
            "type": "string",
            "defaultValue": "Citrix-Vnet",
            "metadata": {
                "description": "Name of the Virtual Network (VNET)"
            }
        },
        "virtualNetworkAddressPrefixes": {
            "type": "string",
            "defaultValue": "192.168.0.0/16",
            "metadata": {
                "description": "Virtual network address CIDR"
            }
        },
        "subnet0Name": {
            "type": "string",
            "defaultValue": "AnsibleSubnet",
            "metadata": {
                "description": "Subnet for Management"
            }
        },
        "subnet1Name": {
            "type": "string",
            "defaultValue": "Managment",
            "metadata": {
                "description": "Subnet For Domain Controller and Cloud Connectors"
            }
        },
        "subnet2Name": {
            "type": "string",
            "defaultValue": "GatewaySubnet",
            "metadata": {
                "description": "Subnet For Azure Gateway"
            }
        },
        "subnet3Name": {
            "type": "string",
            "defaultValue": "VirtualDesktops",
            "metadata": {
                "description": "Subnet For VDI/ Virtual Desktops"
            }
        },
        "subnet0Prefix": {
            "type": "string",
            "defaultValue": "192.168.0.0/24",
            "metadata": {
                "description": "AnsibleSubnet subnet CIDR"
            }
        },
        "subnet1Prefix": {
            "type": "string",
            "defaultValue": "192.168.1.0/24",
            "metadata": {
                "description": "Managment subnet CIDR"
            }
        },
        "subnet2Prefix": {
            "type": "string",
            "defaultValue": "192.168.2.0/24",
            "metadata": {
                "description": "GatewaySubnet subnet CIDR"
            }
        },
        "subnet3Prefix": {
            "type": "string",
            "defaultValue": "192.168.3.0/24",
            "metadata": {
                "description": "VirtualDesktops subnet CIDR"
            }
        },
        "StorageAccountName": {
            "type": "string",
            "defaultValue": "entisys001",
            "metadata": {
                "description": "Storage Account To Hold Variables"
            }
        },
        "adminUsername": {
            "type": "string",
            "metadata": {
                "description": "Admin username for all VMs"
            }
        },
        "_artifactsLocation": {
            "type": "string",
            "metadata": {
                "description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
            },
            "defaultValue": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/301-multi-vmss-linux/"
        },
        "_artifactsLocationSasToken": {
            "type": "securestring",
            "metadata": {
                "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated."
            },
            "defaultValue": ""
        },
        "ManagedIdentityName": {
            "type": "string",
            "defaultValue": "entisysidentity002",
            "metadata": {
                "description": "Managed Identity Name"
            }
        },
        "authenticationType": {
            "type": "string",
            "defaultValue": "sshPublicKey",
            "allowedValues": [
                "sshPublicKey",
                "password"
            ],
            "metadata": {
                "description": "Type of authentication to use on the Virtual Machine. SSH key is recommended."
            }
        },
        "adminPasswordOrKey": {
            "type": "securestring",
            "metadata": {
                "description": "SSH Key or password for the Virtual Machine. SSH key is recommended."
            }
        },
        "role_guid_Assignment": {
            "type": "string",
            "defaultValue": "[newGuid()]",
            "metadata": {
                "description": "description"
            }
        }
    },
    "functions": [],
    "variables": {
        "resourceGroupName": "[resourceGroup().name]",
        "Owner": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
        "AnsibleHostName": "AnsibleOrch001",
        "linuxConfiguration": {
        "disablePasswordAuthentication": true,
            "ssh": {
                "publicKeys": [
                {
                    "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
                    "keyData": "[parameters('adminPasswordOrKey')]"
                }
                ]
            }
        }
    },
    "resources": [
        {
            "name": "[parameters('StorageAccountName')]",
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2019-06-01",
            "tags": {
                "displayName": "[parameters('StorageAccountName')]"
            },
            "location": "[resourceGroup().location]",
            "kind": "StorageV2",
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('ManagedIdentityName'))]"
            ]
        },

        {
            "name": "[parameters('virtualNetworkName')]",
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2019-11-01",
            "location": "[resourceGroup().location]",
            
            "tags": {
                "displayName": "[parameters('virtualNetworkName')]"
            },
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[parameters('virtualNetworkAddressPrefixes')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[parameters('subnet0Name')]",
                        "properties": {
                            "addressPrefix": "[parameters('subnet0Prefix')]"
                        }
                    },
                    {
                        "name": "[parameters('subnet1Name')]",
                        "properties": {
                            "addressPrefix": "[parameters('subnet1Prefix')]"
                        }
                    },
                    {
                        "name": "[parameters('subnet2Name')]",
                        "properties": {
                            "addressPrefix": "[parameters('subnet2Prefix')]"
                        }
                    },
                    {
                        "name": "[parameters('subnet3Name')]",
                        "properties": {
                            "addressPrefix": "[parameters('subnet3Prefix')]"
                        }
                    }
                ]
            },
            "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('ManagedIdentityName'))]"
            ]
        },
        {
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
            "name": "[parameters('ManagedIdentityName')]",
            "apiVersion": "2018-11-30",
            "location": "[resourceGroup().location]"
        },
        // {
        //     "type": "Microsoft.Authorization/roleAssignments",
        //     "apiVersion": "2018-09-01-preview",
        //     "name": "[parameters('role_guid_Assignment')]",
        //     "properties": {
        //         "roleDefinitionId": "[variables('Owner')]",
        //         "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities',parameters('ManagedIdentityName')),'2018-11-30').principalId]",
        //         "scope": "[subscription().id]"
        //     },
        //     "dependsOn": [
        //         "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('ManagedIdentityName'))]"
        //     ]

        // },
        {
        "type": "Microsoft.Resources/deploymentScripts",
        "apiVersion": "2019-10-01-preview",
        "name": "scriptInTemplate2",
        "location": "[resourceGroup().location]",
        "kind": "AzurePowerShell",
        "identity": {
            "type": "userAssigned",
            "userAssignedIdentities": {
            "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities',parameters('ManagedIdentityName'))]": {
            }
            }
        },
        "properties": {
            "forceUpdateTag": "1",
            "azPowerShellVersion": "3.0",
            "timeout": "PT1H",
            "scriptContent": "pwd",
            "cleanupPreference": "OnSuccess",
            "retentionInterval": "P1D"
        }
    },
    {
      "apiVersion": "2020-05-01",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('AnsibleHostName'),'-nic')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
        
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[resourceId(resourceGroup().name, 'Microsoft.Network/virtualNetworks/subnets/', parameters('virtualNetworkName'), parameters('subnet0Name'))]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2020-06-01",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('AnsibleHostName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[parameters('storageAccountName')]",
        "[resourceId(resourceGroup().name,'Microsoft.Network/networkInterfaces', concat(variables('AnsibleHostName'),'-nic'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[variables('AnsibleHostName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPasswordOrKey')]",
          "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "Canonical",
            "offer": "UbuntuServer",
            "sku": "16.04-LTS",
            "version": "latest"
          },
          "osDisk": {
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId(resourceGroup().name,'Microsoft.Network/networkInterfaces', concat(variables('AnsibleHostName'),'-nic'))]"
            }
          ]
        }
      }
    }
  ],
    "outputs": {
        "vnet_id": {
            "type": "string",
            "value": "[resourceId(variables('resourceGroupName'),'Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
        }

    }
}

